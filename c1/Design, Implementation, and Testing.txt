Q: Where does software design fit in the traditional waterfall software development lifecycle?
○ Between architecture and implementation
Between specification and architecture
Between implementation and deployment
Before requirements

Q: Which of the following is NOT an aspect of software design
○ Polymorphism
Coupling
Modularity
Cohesion

Q: The ability to use a built-in function of a programming language to generate a random number is an example of which of the following?
○ Information hiding
Cohesion
Modularity
Coupling

Q: Analyzing the extent to which other modules must change when a module is modified is an example of which of the following?
○ Coupling
Cohesion
Modularity
Information hiding

Q: When all of the responsibilities of a module are easily classified as being strongly related, this is an example of high what?
○ Cohesion
Modularity
Information hiding
Coupling

Q: Which of the following is most preferred?
○ Allowing one module to affect the program flow of another via the use of a state message (message coupling)
Allowing one module to affect the program flow of another via the use of a flag (control coupling)
Having more than one module rely on the same version of the RSS standard (external coupling)
Having two modules rely on the same global information structure (common coupling)

Q: Which of the following is LEAST desirable?
○ including functionality which occurs around the same time
including functionality which modifies an object's own attributes
including functionality which relys on the same input
including functionality which entirely encapsulates all the necessary function for a specific task

Q: Which of the following are necessary before proper testing?
inputs and expected output
○ inputs, expected output, and an oracle
inputs which cause issues
inputs, expected output, an oracle, and the actual output

Q: 
Which of the following is a mistake made by the developer?
○ Fault
Which of the following is an mistake in code which is found in code review?
○ Effective error


Q: Which of the following is an example of validation?
○ software is well-received by the user
ensuring the system locks out an account after three failed log-in attempts
software recognizes incorrect inputs
use of the software provides the correct results as documented

Q: In your current project, you have access to some intern development resources, which are not currently operating at full capacity. You also know that the testing timeline will be truncated, due to delays in critical-path module development. Which strategy should you employ?
○ Utilize the intern resources to design and develop drivers and stubs, while work continues on critical-path module development
Allow the testing team to work without (or with quick-to-develop) drivers and stubs, while using intern resources to aid critical-path development
Make no changes to the current project testing or development allocations, utilizing intern resources to create documentation.
Allow the testing team to work without (or with quick-to-develop) drivers and stubs, and utilize the intern resources to aid testing once all critical-path development is complete

Q: When is testing complete?
○ When you run out of time
When you have completed all the tests in the test plan
When you find the last bug
When you have tested every input

Q: Which of the following is an example of black-box testing?
○ Developing test cases based on typical user behavior
Developing additional test cases to force a division by zero
Developing test cases to exercise error-prone constructs
Developing additional tests when every if statement does not evaluate both true and false once given the current test suite